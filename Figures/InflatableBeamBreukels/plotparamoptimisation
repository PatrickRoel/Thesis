import argparse
import sys
import numpy as np
import pandas as pd
import os

"""
plot_param_optimization.py

Reads a CSV with header:
pressure,diameter,alpha,beta,gamma,error,converged

Extracts alpha, beta, gamma and plots a 3D surface (alpha, beta, error)
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 -- registers 3D projection

def main():
    parser = argparse.ArgumentParser(description="3D scatter of (alpha, beta, gamma) colored by error (lower error -> larger marker)")
    default_csv = os.path.join(os.path.dirname(__file__), "inflatable_beam_results_doublegamma.csv")
    parser.add_argument("csv_file", nargs="?", default=default_csv, help="CSV file to read (default: inflatable_beam_results.csv)")
    parser.add_argument("-o", "--out", help="Optional output image file (e.g. plot.png). If not provided the plot will be shown.")
    args = parser.parse_args()

    try:
        df = pd.read_csv(args.csv_file)
    except Exception as e:
        print(f"Failed to read CSV '{args.csv_file}': {e}", file=sys.stderr)
        sys.exit(1)

    # required columns
    for col in ("alpha", "beta", "gamma", "error"):
        if col not in df.columns:
            print(f"CSV missing required column: {col}", file=sys.stderr)
            sys.exit(1)

    alpha = df["alpha"].to_numpy()
    beta = df["beta"].to_numpy()
    gamma = df["gamma"].to_numpy()
    error = df["error"].to_numpy()

    # compute marker sizes so that LOWER error -> LARGER size
    eps = 1e-12
    err_min, err_max = np.nanmin(error), np.nanmax(error)
    # invert and normalize to [0,1]
    inv_norm = (err_max - error) / (err_max - err_min + eps)
    # prepare marker sizes (lower error -> larger marker)
    sizes = 20 + inv_norm * 180

    # helper to compute bin edges for non-uniform coordinates
    def compute_edges(vals):
        vals = np.asarray(vals)
        if vals.size == 1:
            d = 1.0 if vals[0] == 0 else abs(vals[0]) * 0.1
            return np.array([vals[0] - d, vals[0] + d])
        diffs = np.diff(vals)
        left = vals[0] - diffs[0] / 2.0
        right = vals[-1] + diffs[-1] / 2.0
        mids = vals[:-1] + diffs / 2.0
        return np.concatenate(([left], mids, [right]))

    # loop over unique gamma values and make a 2D alpha-beta heatmap for each
    unique_gammas = np.unique(gamma)
    for g in unique_gammas:
        df_g = df[np.isclose(df["gamma"].to_numpy(), g)]

        if df_g.empty:
            continue

        alpha_vals = np.sort(df_g["alpha"].unique())
        beta_vals = np.sort(df_g["beta"].unique())

        # pivot to a 2D grid (rows=beta, cols=alpha)
        pivot = df_g.pivot_table(index="beta", columns="alpha", values="error", aggfunc=np.mean)
        pivot = pivot.reindex(index=beta_vals, columns=alpha_vals)  # ensure full ordering
        Z = pivot.to_numpy()

        # compute edges for pcolormesh
        alpha_edges = compute_edges(alpha_vals)
        beta_edges = compute_edges(beta_vals)

        fig, ax = plt.subplots(figsize=(6, 5))
        cmap = plt.get_cmap("viridis")
        pcm = ax.pcolormesh(alpha_edges, beta_edges, Z, shading="auto", cmap=cmap)
        ax.set_xlabel("alpha")
        ax.set_ylabel("beta")
        ax.set_title(f"Error heatmap (gamma = {g})")
        cb = fig.colorbar(pcm, ax=ax)
        cb.set_label("error")

        # save or show
        if args.out:
            out = args.out
            # allow directory, or a format string containing '{}' to inject gamma
            if os.path.isdir(out) or out.endswith(os.sep):
                out_dir = out if os.path.isdir(out) else out.rstrip(os.sep)
                os.makedirs(out_dir, exist_ok=True)
                safe_g = str(g).replace(".", "p").replace("-", "m")
                out_path = os.path.join(out_dir, f"heatmap_gamma_{safe_g}.png")
            else:
                base, ext = os.path.splitext(out)
                if "{" in out and "}" in out:
                    out_path = out.format(g)
                else:
                    ext = ext if ext else ".png"
                    safe_g = str(g).replace(".", "p").replace("-", "m")
                    out_path = f"{base}_gamma_{safe_g}{ext}"
            fig.savefig(out_path, dpi=150, bbox_inches="tight")
            plt.close(fig)
        else:
            plt.show()

if __name__ == "__main__":
    main()